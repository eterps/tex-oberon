module               = 'MODULE' sp+ ident ';' sp+ importlist? declarationsequence sp*
                       ('BEGIN' sp+ statementsequence)? sp* 'END' sp+ ident sp* '.' sp*
declarationsequence  = ('CONST' sp+ (constdeclaration sp* ';' sp*)*)?
                       ('TYPE' sp+ (typedeclaration sp* ';' sp* )*)?
                       ('VAR' sp+ (variabledeclaration sp* ';' sp*)*)?
                       (proceduredeclaration ';')*
importlist           = 'TODO'
statementsequence    = statement sp* (";" sp* statement )*
statement            = (assignment / procedurecall / ifstatement /
                        casestatement / whilestatement / repeatstatement /
                        forstatement)?
constdeclaration     = 'TODO'
typedeclaration      = identdef sp* '=' sp* structype
variabledeclaration  = identlist ':' sp* type
identlist            = identdef sp* (',' sp* identdef)*
identdef             = ident '*'?
type                 = structype / qualident
structype            = arraytype / recordtype / pointertype / proceduretype
arraytype            = 'ARRAY' sp* length (',' sp* length)* sp* 'OF' sp+ type
length               = constexpression
constexpression      = expression
recordtype           = 'RECORD' sp* ('(' sp* basetype sp* ')')? sp* fieldlistsequence? sp* 'END'
pointertype          = 'POINTER' sp* 'TO' sp* type
proceduretype        = 'TODO'
proceduredeclaration = 'TODO'
procedurecall     = 'TODO'
ifstatement       = 'TODO'
casestatement     = 'TODO'
whilestatement    = 'WHILE' sp* expression sp* 'DO' sp* statementsequence
                    ('ELSIF' sp* expression sp* 'DO' sp* statementsequence)* sp* 'END' sp*
repeatstatement   = 'REPEAT' sp* statementsequence sp* 'UNTIL' sp* expression
forstatement      = 'TODO'
fieldlistsequence = fieldlist sp* (';' sp* fieldlist sp*)*
fieldlist         = identlist sp* ':' sp* type
basetype          = qualident
assignment        = designator sp* ':=' sp* expression
designator        = qualident selector*
qualident         = ident '.' qualident / ident
selector          = '.' ident / '[' explist ']' / '^' / '(' qualident ')'
explist           = expression sp* (',' sp* expression)*
relation          = '=' / '#' / '<=' / '<' / '>=' / '>' / 'IN' / 'IS'
expression        = simpleexpression sp* (relation sp* simpleexpression)?
simpleexpression  = ('+' / '-')? term sp* (addoperator sp* term sp*)*
addoperator       = '+' / '-' / 'OR'
muloperator       = '*' / '/' / 'DIV' / 'MOD' / '&'
term              = factor sp* (muloperator sp* factor)*
factor            = number / string / 'NIL' / 'TRUE' / 'FALSE' /
                    set / designator actualparameters? / '(' expression ')' / '~' factor
designator        = qualident selector*
actualparameters  = 'TODO'
set               = '{' sp* (element sp* (sp* ',' sp* element)*)? '}'
element           = expression ('..' expression)*
string            = '"' (!'"' character)+ '"' / digit hexdigit? 'X'
number            = real / integer
integer           = digit+ / digit hexdigit* 'H'
real              = digit+ '.' digit* scalefactor?
scalefactor       = 'E' ('+' / '-')? digit+
ident             = !keyword alpha alphanum*
alpha             = [a-zA-Z]
digit             = [0-9]
hexdigit          = [0-9a-fA-F]
alphanum          = alpha / digit
character         = [\x20-\uFFFF]
sp                = [ \t\r\n\f]
keyword           = 'END'

